#include deck

fate_deck = {}
local fate_deck_GUID_cache = nil
local FATE_DECK_ZONE_GUID = "4d2408"

--------------------------------------------------------------------------------
-- Finds the fate deck GUID dynamically.
--------------------------------------------------------------------------------
function fate_deck.getFateDeckGUID()
  -- If the cached fate deck GUID is still valid, return the cached GUID.
  if fate_deck_GUID_cache ~= nil then
    local fate_deck = getObjectFromGUID(fate_deck_GUID_cache)
    if fate_deck ~= nil and fate_deck.type == "Deck" then
      log_utils.info("Existing fate deck GUID ".. fate_deck.guid)
      return fate_deck_GUID_cache
    end
  end

  -- Cached fate deck GUID is no longer valid, retrieve a new one and cache it.
  fate_deck_GUID_cache = deck.getDeckFromZoneGUID(FATE_DECK_ZONE_GUID)
  return fate_deck_GUID_cache
end

--------------------------------------------------------------------------------
-- Returns the fate deck position, which is defined to be the fate deck zone
-- position.
--------------------------------------------------------------------------------
function fate_deck.getFateDeckPosition()
  deck_zone = getObjectFromGUID(FATE_DECK_ZONE_GUID)
  return deck_zone.getPosition()
end

--------------------------------------------------------------------------------
-- Draws a card from the fate deck if available.
--
-- @param player_color Color of the player trying to draw the card.
-- @param card_prefix Unique identifier of a type of fate cards. fate cards of
--        the same type are grouped by a unique prefix, for example, all dog
--        leash cards starts with the name "dog_leash_".
-- @param card_name A human readable string used for logging purposes.
--------------------------------------------------------------------------------
function fate_deck.drawFromFateDeck(player_color, card_prefix, card_name)
  deck.drawFromDeck(player_color, fate_deck.getFateDeckGUID(), "", "random fate")
end

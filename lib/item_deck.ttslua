#include deck

item_deck = {}
item_deck_GUID_cache = nil

--------------------------------------------------------------------------------
-- Finds the item deck GUID dynamically.
--------------------------------------------------------------------------------
function getItemDeckGUID()
  -- If the cached item deck GUID is still valid, return the cached GUID.
  if item_deck_GUID_cache ~= nil then
    local item_deck = getObjectFromGUID(item_deck_GUID_cache)
    if item_deck ~= nil then
      log_utils.info("Existing item deck GUID ".. item_deck.guid)
      return item_deck_GUID_cache
    end
  end

  -- Cached item deck GUID is no longer valid, retrieve a new one and cache it.
  item_deck_GUID_cache = deck.getDeckFromZoneGUID("c0a960")
  return item_deck_GUID_cache
end

--------------------------------------------------------------------------------
-- Draws a card from the item deck if available.
--
-- @param player_color Color of the player trying to draw the card.
-- @param card_prefix Unique identifier of a type of item cards. Item cards of
--        the same type are grouped by a unique prefix, for example, all dog
--        leash cards starts with the name "dog_leash_".
-- @param card_name A human readable string used for logging purposes.
--------------------------------------------------------------------------------
function item_deck.drawFromItemDeck(player_color, card_prefix, card_name)
  local deck_GUID = getItemDeckGUID()
  local item_deck = getObjectFromGUID(deck_GUID)
  if item_deck == nil then
    print("No cards on item deck")
    return
  end

  deck.drawFromDeck(player_color, deck_GUID, card_prefix, card_name)
end

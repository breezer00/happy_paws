#include custom_checkbox

persistent_attributes = {}

local display_text_to_rules = {}
display_text_to_rules["Spayed"] = "Must pay 2H and stay 1 day in the vet to get spayed; pre-requisit for pet insurance"
display_text_to_rules["Neutered"] = "Must pay 2H and stay 1 day in the vet to get neutered; pre-requisit for pet insurance"
display_text_to_rules["Pet Insurance"] = "Must be spayed first; cost 2H; VP=1; H loss -1 in the vet; can be bought in pet stores"
display_text_to_rules["CGC Certificate"] = "Training must be >=3; cost 2H; VP=1; can use transportation; can be bought in pet stores"
display_text_to_rules["Dog Luxury Bed"] = "Cleanliness must be >=3; cost 2H; VP=1; no relationship loss in the hotel; can be bought in pet stores"

--------------------------------------------------------------------------------
-- Creates a custom checkbox to represent a persistent attribute.
--------------------------------------------------------------------------------
function persistent_attributes.onLoad(display_text)
  custom_checkbox.onLoad(display_text, display_text_to_rules[display_text])
end

--------------------------------------------------------------------------------
-- Un/Marks a persistent attribute, if the persistent attribute affects victory
-- points, update victory points as well.
--
-- @param obj The Object the button is attached to.
-- @param color Player Color of the player that pressed the button.
-- @param alt_click True if a button other than left-click was used to click the
--        button.
-- @param vp_GUID Optional, can be passed in if the persistent attribute affects
--                victory points.
--------------------------------------------------------------------------------
function persistent_attributes.click_function(obj, color, alt_click, vp_GUID)
  custom_checkbox.click_function(obj, color, alt_click)

  if vp_GUID ~= nil then
    vp = getObjectFromGUID(vp_GUID)
    if custom_checkbox.isChecked() then
      vp.setValue(vp.getValue() + 1)
    else
      vp.setValue(vp.getValue() - 1)
    end
  end
end
